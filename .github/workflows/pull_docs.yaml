name: Deploy to GitHub Pages

on:
  repository_dispatch:
    types: [docs-updated-on-main, preview-docs-pr]

env:
  NODE_OPTIONS: --max-old-space-size=5500

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # First checkout the test repo with the PR changes
      - name: Checkout test repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: iliasmavridis/test
          path: test
          ref: ${{ github.event.client_payload.sha }}

      # Then checkout test2 repo
      - uses: actions/checkout@v3
        name: "Checkout test2"
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: iliasmavridis/test2
          path: test2

      - name: Determine build type
        id: build-type
        run: |
          if [[ "${{ github.event.action }}" == "docs-updated-on-main" ]]; then
            echo "type=production" >> $GITHUB_OUTPUT
            echo "base_url=/test2/" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.action }}" == "preview-docs-pr" ]]; then
            echo "type=staging" >> $GITHUB_OUTPUT
            echo "base_url=/test2/pr-preview/${{ github.event.client_payload.pr_number }}/" >> $GITHUB_OUTPUT
          else
            echo "Unknown event type" >> $GITHUB_OUTPUT
            exit 1
          fi

      # Create and switch to PR-specific branch for staging
      - name: Create PR branch (Staging)
        if: steps.build-type.outputs.type == 'staging'
        run: |
          cd test2
          git config --global user.name 'github-actions[test]'
          git config --global user.email 'test@noreply.github.com'
          git checkout -b pr-${{ github.event.client_payload.pr_number }}
          git push -u origin pr-${{ github.event.client_payload.pr_number }} || true

      # For production: merge PR branch content to main and update gh-pages
      - name: Handle production deployment
        if: steps.build-type.outputs.type == 'production'
        run: |
          cd test2
          # Configure git
          git config --global user.name 'github-actions[test]'
          git config --global user.email 'test@noreply.github.com'
          
          # Fetch all branches and ensure we have the latest
          git fetch --all
          git fetch origin gh-pages:gh-pages
          
          echo "Current branches:"
          git branch -a
          
          # Ensure PR branch exists and get its name
          PR_BRANCH="pr-${{ github.event.client_payload.pr_number }}"
          PR_NUMBER="${{ github.event.client_payload.pr_number }}"
          
          echo "Checking for PR branch: ${PR_BRANCH}"
          if ! git show-ref --quiet refs/remotes/origin/${PR_BRANCH}; then
            echo "PR branch ${PR_BRANCH} not found!"
            exit 1
          fi
          
          # Checkout PR branch first to get its content
          git checkout ${PR_BRANCH}
          
          # Store PR branch content
          echo "Storing PR branch content..."
          mkdir -p ../pr_content
          cp -r * ../pr_content/ || true
          
          # Checkout main branch
          git checkout main
          
          # Copy content from PR backup
          echo "Copying content to main..."
          cp -r ../pr_content/* ./ || true
          
          # Create production docusaurus config
          echo "Creating production docusaurus configuration..."
          cat << 'EOF' > docusaurus.config.js
          const config = {
            title: 'Documentation',
            tagline: 'Documentation',
            favicon: 'img/favicon.ico',
            url: 'https://iliasmavridis.github.io',
            baseUrl: '/test2/',
            onBrokenLinks: 'ignore',
            onBrokenMarkdownLinks: 'ignore',
            organizationName: 'iliasmavridis',
            projectName: 'test2',
            trailingSlash: false,
            presets: [
              [
                'classic',
                {
                  docs: {
                    sidebarPath: require.resolve('./sidebars.js'),
                    routeBasePath: '/',
                  },
                  blog: false,
                  theme: {
                    customCss: require.resolve('./src/css/custom.css'),
                  },
                },
              ],
            ],
            themeConfig: {
              navbar: {
                title: 'Documentation',
                items: [{type:'docSidebar',sidebarId:'tutorialSidebar',position:'left',label:'Docs'}]
              },
              footer: {
                style: 'dark',
                links: [],
                copyright: 'Â© Documentation'
              }
            }
          };

          module.exports = config;
          EOF
                    
                    # Create production package.json
                    echo "Creating production package.json..."
                    cat << 'EOF' > package.json
          {
            "name": "documentation",
            "version": "0.0.0",
            "private": true,
            "scripts": {
              "docusaurus": "docusaurus",
              "start": "docusaurus start",
              "build": "docusaurus build",
              "swizzle": "docusaurus swizzle",
              "deploy": "docusaurus deploy",
              "clear": "docusaurus clear",
              "serve": "docusaurus serve",
              "write-translations": "docusaurus write-translations",
              "write-heading-ids": "docusaurus write-heading-ids"
            },
            "dependencies": {
              "@docusaurus/core": "3.1.1",
              "@docusaurus/preset-classic": "3.1.1",
              "@mdx-js/react": "^3.0.0",
              "clsx": "^2.0.0",
              "prism-react-renderer": "^2.3.0",
              "react": "^18.2.0",
              "react-dom": "^18.2.0"
            },
            "devDependencies": {
              "@docusaurus/module-type-aliases": "3.1.1",
              "@docusaurus/types": "3.1.1"
            },
            "browserslist": {
              "production": [
                ">0.5%",
                "not dead",
                "not op_mini all"
              ],
              "development": [
                "last 1 chrome version",
                "last 1 firefox version",
                "last 1 safari version"
              ]
            },
            "engines": {
              "node": ">=18.0"
            }
          }
          EOF

          # Create minimal required files if they don't exist
          echo "Creating necessary files..."
          mkdir -p src/css
          [ ! -f src/css/custom.css ] && echo "/* Custom CSS */" > src/css/custom.css
          [ ! -f sidebars.js ] && echo "module.exports = {tutorialSidebar: [{type: 'autogenerated', dirName: '.'}]};" > sidebars.js
          
          # Add and commit changes to main
          echo "Committing changes to main..."
          git add .
          git commit -m "Merge documentation changes from PR #${PR_NUMBER}" || echo "No changes to commit"
          git push origin main
          
          # Build the documentation for production
          echo "Building documentation..."
          npm install
          SITE_URL="https://iliasmavridis.github.io/test2" npm run build
          
          # Verify build directory exists
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          
          # Switch to gh-pages branch and update content
          echo "Updating gh-pages branch..."
          git checkout gh-pages
          
          # Preserve pr-preview directory
          mkdir -p ../pr-preview-backup
          if [ -d "pr-preview" ]; then
            echo "Backing up pr-preview directory..."
            cp -r pr-preview ../pr-preview-backup/
          fi
          
          # Clean current directory except .git
          echo "Cleaning gh-pages branch..."
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          
          # Copy new build
          echo "Copying new build to gh-pages..."
          cp -r build/* .
          rm -rf build
          
          # Restore pr-preview directory but remove current PR's preview
          if [ -d "../pr-preview-backup/pr-preview" ]; then
            echo "Restoring pr-preview directory..."
            mkdir -p pr-preview
            cp -r ../pr-preview-backup/pr-preview/* pr-preview/ 2>/dev/null || true
            echo "Removing preview for PR #${PR_NUMBER}..."
            rm -rf "pr-preview/${PR_NUMBER}" || true
          fi
          
          # Commit and push changes to gh-pages
          echo "Committing changes to gh-pages..."
          git add .
          git status
          git commit -m "Deploy documentation from PR #${PR_NUMBER}" || echo "No changes to commit"
          git push origin gh-pages
          
          # Switch back to main and clean up
          echo "Cleaning up..."
          git checkout main
          echo "Deleting PR branch..."
          git push origin --delete ${PR_BRANCH} || echo "Could not delete remote branch"
          
          echo "Production deployment completed successfully"

      # Set up directory structure for staging
      - name: Set up directory structure (Staging)
        if: steps.build-type.outputs.type == 'staging'
        run: |
          cd test2
          
          # Create backup directory
          mkdir -p backup
          
          # Backup existing files if they exist
          [ -f sidebars.js ] && cp sidebars.js backup/ || true
          [ -f babel.config.js ] && cp babel.config.js backup/ || true
          [ -d src ] && cp -r src backup/ || true
          [ -d static ] && cp -r static backup/ || true
          
          # Clean directory while preserving .git and backup
          find . -mindepth 1 -maxdepth 1 ! -name '.git' ! -name 'backup' -exec rm -rf {} +
          
          # Create necessary directories
          mkdir -p docs
          mkdir -p blog
          mkdir -p static
          mkdir -p src/css
          
          # Copy docs content from test repo
          echo "Copying docs content..."
          cp -r ../test/docs/* ./docs/ || true
          
          # Create default CSS file if it doesn't exist
          echo "/* Custom styles */" > src/css/custom.css
          
          # Create minimal index file for blog
          echo '---\nslug: /\ntitle: Blog\n---\n\nNo blog posts yet.' > blog/index.md
          
          # Create sidebars.js if it doesn't exist
          echo 'module.exports = {tutorialSidebar: [{type: "autogenerated",dirName: "."}]};' > sidebars.js
          
          # Restore backed up files
          [ -f backup/sidebars.js ] && cp backup/sidebars.js ./ || true
          [ -f backup/babel.config.js ] && cp backup/babel.config.js ./ || true
          [ -d backup/src ] && cp -r backup/src/* src/ || true
          [ -d backup/static ] && cp -r backup/static/* static/ || true
          
          # Cleanup backup
          rm -rf backup
          
          echo "Final directory structure:"
          ls -la
          echo "Docs content:"
          ls -la docs/ || echo "No docs content"

      # Configure Docusaurus
      - name: Configure Docusaurus
        if: steps.build-type.outputs.type == 'staging'
        run: |
          cd test2
          
          # Create package.json first
          cat << EOF > package.json
          {
            "name": "documentation",
            "version": "0.0.0",
            "private": true,
            "scripts": {
              "docusaurus": "docusaurus",
              "start": "docusaurus start",
              "build": "docusaurus build",
              "swizzle": "docusaurus swizzle",
              "deploy": "docusaurus deploy",
              "clear": "docusaurus clear",
              "serve": "docusaurus serve",
              "write-translations": "docusaurus write-translations",
              "write-heading-ids": "docusaurus write-heading-ids"
            },
            "dependencies": {
              "@docusaurus/core": "3.1.1",
              "@docusaurus/preset-classic": "3.1.1",
              "@mdx-js/react": "^3.0.0",
              "clsx": "^2.0.0",
              "prism-react-renderer": "^2.3.0",
              "react": "^18.2.0",
              "react-dom": "^18.2.0"
            },
            "devDependencies": {
              "@docusaurus/module-type-aliases": "3.1.1",
              "@docusaurus/types": "3.1.1"
            },
            "browserslist": {
              "production": [
                ">0.5%",
                "not dead",
                "not op_mini all"
              ],
              "development": [
                "last 1 chrome version",
                "last 1 firefox version",
                "last 1 safari version"
              ]
            },
            "engines": {
              "node": ">=18.0"
            }
          }
          EOF
          
          # Then create docusaurus.config.js
          cat << \EOF > docusaurus.config.js
          const config = {
            title: 'Documentation',
            tagline: 'Documentation',
            url: 'https://iliasmavridis.github.io',
            baseUrl: '${{ steps.build-type.outputs.base_url }}',
            onBrokenLinks: 'ignore',
            onBrokenMarkdownLinks: 'ignore',
            favicon: 'img/favicon.ico',
            organizationName: 'iliasmavridis',
            projectName: 'test2',
            trailingSlash: false,
            presets: [
              [
                'classic',
                {
                  docs: {
                    sidebarPath: require.resolve('./sidebars.js'),
                    routeBasePath: '/',
                  },
                  blog: false,
                  theme: {
                    customCss: require.resolve('./src/css/custom.css'),
                  },
                },
              ],
            ],
            themeConfig: {
              navbar: {
                title: 'Documentation',
                items: [{type:'docSidebar',sidebarId:'tutorialSidebar',position:'left',label:'Docs'}]
              },
              footer: {
                style: 'dark',
                links: [],
                copyright: 'Â© Documentation Preview'
              },
              announcementBar: {
                id: 'staging-environment',
                content: 'â ï¸ This is a <strong>Preview Environment</strong> for PR #${{ github.event.client_payload.pr_number }}. Changes may not be final. <strong>Do not use in production.</strong>',
                backgroundColor: '#ffcc00',
                textColor: '#000000',
                isCloseable: false
              }
            }
          };
          module.exports = config;
          EOF

      # Install dependencies and build
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies and build (Staging)
        if: steps.build-type.outputs.type == 'staging'
        run: |
          cd test2
          echo "Installing dependencies..."
          npm install
          echo "Building website for staging..."
          npm run build
          echo "Website built successfully"

      - name: Install dependencies and build (Production)
        if: steps.build-type.outputs.type == 'production'
        run: |
          cd test2
          echo "Installing dependencies..."
          npm install
          echo "Building website for production..."
          npm run build
          echo "Website built successfully"

      # Commit changes to PR branch
      - name: Commit changes to PR branch
        if: steps.build-type.outputs.type == 'staging'
        run: |
          cd test2
          git add .
          git commit -m "Update documentation for PR #${{ github.event.client_payload.pr_number }}" || echo "No changes to commit"
          git push origin pr-${{ github.event.client_payload.pr_number }}

      # Deploy the build
      - name: Deploy to GitHub Pages (Staging)
        if: steps.build-type.outputs.type == 'staging'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PAT }}
          publish_dir: ./test2/build
          publish_branch: gh-pages
          destination_dir: pr-preview/${{ github.event.client_payload.pr_number }}
          repository: iliasmavridis/test2
          user_name: 'github-actions[test]'
          user_email: 'test@noreply.github.com'

      # Deploy the build for production
      - name: Deploy to GitHub Pages (Production)
        if: steps.build-type.outputs.type == 'production'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PAT }}
          publish_dir: ./test2/build
          publish_branch: gh-pages
          keep_files: true
          destination_dir: .
          repository: iliasmavridis/test2
          user_name: 'github-actions[test]'
          user_email: 'test@noreply.github.com'

      - name: Comment on PR in test repo
        if: steps.build-type.outputs.type == 'staging'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const pr_number = ${{ github.event.client_payload.pr_number }};
            const preview_url = `https://iliasmavridis.github.io/test2/pr-preview/${pr_number}`;
            const commentBody = "ð This PR updates the documentation.\n\n" +
                              "ð Preview this PR at: " + preview_url + " .";

            await github.rest.issues.createComment({
              issue_number: parseInt(pr_number),
              owner: 'iliasmavridis',
              repo: 'test',
              body: commentBody
            });