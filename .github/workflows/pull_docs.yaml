name: Deploy to GitHub Pages

on:
  repository_dispatch:
    types: [docs-updated-on-main, preview-docs-pr]

env:
  NODE_OPTIONS: --max-old-space-size=5500

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # First checkout the test repo with the PR changes
      - name: Checkout test repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: iliasmavridis/test
          path: test
          ref: ${{ github.event.client_payload.sha }}

      # Then checkout test2 repo
      - uses: actions/checkout@v3
        name: "Checkout test2"
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: iliasmavridis/test2
          path: test2

      - name: Determine build type
        id: build-type
        run: |
          if [[ "${{ github.event.action }}" == "docs-updated-on-main" ]]; then
            echo "type=production" >> $GITHUB_OUTPUT
            echo "base_url=/test2/" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.action }}" == "preview-docs-pr" ]]; then
            echo "type=staging" >> $GITHUB_OUTPUT
            echo "base_url=/test2/pr-preview/${{ github.event.client_payload.pr_number }}/" >> $GITHUB_OUTPUT
          else
            echo "Unknown event type" >> $GITHUB_OUTPUT
            exit 1
          fi

      # Create and switch to PR-specific branch for staging
      - name: Create PR branch (Staging)
        if: steps.build-type.outputs.type == 'staging'
        run: |
          cd test2
          git config --global user.name 'github-actions[test]'
          git config --global user.email 'test@noreply.github.com'
          git checkout -b pr-${{ github.event.client_payload.pr_number }}
          git push -u origin pr-${{ github.event.client_payload.pr_number }} || true

      # For production: merge PR branch content to main
      - name: Handle production deployment
        if: steps.build-type.outputs.type == 'production'
        run: |
          cd test2
          # Configure git
          git config --global user.name 'github-actions[test]'
          git config --global user.email 'test@noreply.github.com'
          
          # Fetch all branches
          git fetch origin
          
          # Get PR number from the branch name
          PR_BRANCH="pr-${{ github.event.client_payload.pr_number }}"
          echo "Processing production deployment for ${PR_BRANCH}"
          
          # Checkout main branch
          git checkout main
          
          # Copy content from PR branch
          git checkout ${PR_BRANCH} -- website/docs/
          
          # Add and commit changes
          git add website/docs/
          git commit -m "Merge documentation changes from PR #${{ github.event.client_payload.pr_number }}"
          git push origin main
          
          # Delete the PR branch both locally and remotely
          git branch -D ${PR_BRANCH} || true
          git push origin --delete ${PR_BRANCH} || true
          
          echo "Successfully merged docs and cleaned up PR branch"

      # Set up the directory structure
      - name: Set up directory structure
        run: |
          if [[ "${{ steps.build-type.outputs.type }}" == "staging" ]]; then
            # Clear and create directories for staging
            rm -rf ./test2/website
            mkdir -p ./test2/website/docs
            mkdir -p ./test2/website/blog
            
            # Copy docs content from the PR in test repo
            echo "Copying content from test repo PR branch..."
            cp -r ./test/docs/* ./test2/website/docs/
            
            # Create minimal blog index
            echo '---\nslug: /\ntitle: Blog\n---\n\nNo blog posts yet.' > ./test2/website/blog/index.md
          else
            # For production, create directories if they don't exist
            mkdir -p ./test2/website/docs
            
            # Copy content from test repo to docs directory
            echo "Copying content for production deployment..."
            cp -r ./test/docs/* ./test2/website/docs/
          fi
          
          # Copy Docusaurus config files
          cp -r ./test2/docusaurus.config.js ./test2/website/ || true
          cp -r ./test2/package.json ./test2/website/ || true
          cp -r ./test2/package-lock.json ./test2/website/ || true
          cp -r ./test2/sidebars.js ./test2/website/ || true
          cp -r ./test2/babel.config.js ./test2/website/ || true
          cp -r ./test2/src ./test2/website/ || true
          cp -r ./test2/static ./test2/website/ || true
          
          echo "Directory contents after setup:"
          ls -la ./test2/website

      # Modify docusaurus.config.js for environment
      - name: Modify docusaurus.config.js for environment
        run: |
          cd test2
          if [[ "${{ steps.build-type.outputs.type }}" == "staging" ]]; then
            cat << \EOF > docusaurus.config.js
          const config = {
            title: 'Documentation',
            tagline: 'Documentation',
            favicon: 'img/favicon.ico',
            url: 'https://iliasmavridis.github.io',
            baseUrl: '${{ steps.build-type.outputs.base_url }}',
            onBrokenLinks: 'ignore',
            onBrokenMarkdownLinks: 'ignore',
            organizationName: 'iliasmavridis',
            projectName: 'test2',
            presets: [['classic',{docs:{sidebarPath:require.resolve('./sidebars.js'),routeBasePath:'/'},blog:{showReadingTime:false,blogTitle:' ',blogDescription:' '},theme:{customCss:require.resolve('./src/css/custom.css')}}]],
            themeConfig: {
              navbar: {
                title: 'Documentation',
                items: [{type:'docSidebar',sidebarId:'tutorialSidebar',position:'left',label:'Docs'}]
              },
              footer: {
                style: 'dark',
                links: [],
                copyright: '© Documentation Preview'
              },
              announcementBar: {
                id: 'staging-environment',
                content: '⚠️ This is a <strong>Preview Environment</strong> for PR #${{ github.event.client_payload.pr_number }}. Changes may not be final. <strong>Do not use in production.</strong>',
                backgroundColor: '#ffcc00',
                textColor: '#000000',
                isCloseable: false
              }
            }
          };
          module.exports = config;
          EOF
                    else
                      cat << \EOF > docusaurus.config.js
          const config = {
            title: 'Documentation',
            tagline: 'Documentation',
            favicon: 'img/favicon.ico',
            url: 'https://iliasmavridis.github.io',
            baseUrl: '${{ steps.build-type.outputs.base_url }}',
            onBrokenLinks: 'ignore',
            onBrokenMarkdownLinks: 'ignore',
            organizationName: 'iliasmavridis',
            projectName: 'test2',
            presets: [['classic',{docs:{sidebarPath:require.resolve('./sidebars.js'),routeBasePath:'/'},blog:{showReadingTime:false,blogTitle:' ',blogDescription:' '},theme:{customCss:require.resolve('./src/css/custom.css')}}]],
            themeConfig: {
              navbar: {
                title: 'Documentation',
                items: [{type:'docSidebar',sidebarId:'tutorialSidebar',position:'left',label:'Docs'}]
              },
              footer: {
                style: 'dark',
                links: [],
                copyright: '© Documentation'
              }
            }
          };
          module.exports = config;
          EOF
                    fi
                    
                    # Install dependencies if package.json exists, otherwise create it
                    if [ ! -f "package.json" ]; then
                      # Create package.json with Docusaurus dependencies
                      cat << \EOF > package.json
          {
            "name": "documentation",
            "version": "0.0.0",
            "private": true,
            "scripts": {
              "docusaurus": "docusaurus",
              "start": "docusaurus start",
              "build": "docusaurus build",
              "swizzle": "docusaurus swizzle",
              "deploy": "docusaurus deploy",
              "clear": "docusaurus clear",
              "serve": "docusaurus serve",
              "write-translations": "docusaurus write-translations",
              "write-heading-ids": "docusaurus write-heading-ids"
            },
            "dependencies": {
              "@docusaurus/core": "^3.0.0",
              "@docusaurus/preset-classic": "^3.0.0",
              "@mdx-js/react": "^3.0.0",
              "clsx": "^1.2.1",
              "prism-react-renderer": "^2.1.0",
              "react": "^18.2.0",
              "react-dom": "^18.2.0"
            },
            "browserslist": {
              "production": [
                ">0.5%",
                "not dead",
                "not op_mini all"
              ],
              "development": [
                "last 1 chrome version",
                "last 1 firefox version",
                "last 1 safari version"
              ]
            },
            "engines": {
              "node": ">=18.0"
            }
          }
          EOF
          fi
          
          echo "Modified docusaurus.config.js content:"
          cat docusaurus.config.js

      # Install dependencies and build
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: test2/package-lock.json

      - name: Install dependencies
        run: npm install --frozen-lockfile
        working-directory: ./test2

      - name: Build website
        run: npm run build
        working-directory: ./test2

      # Commit changes to PR branch
      - name: Commit changes to PR branch
        if: steps.build-type.outputs.type == 'staging'
        run: |
          cd test2
          git add .
          git commit -m "Update documentation for PR #${{ github.event.client_payload.pr_number }}"
          git push origin pr-${{ github.event.client_payload.pr_number }}

      - name: Deploy to GitHub Pages (Staging)
        if: steps.build-type.outputs.type == 'staging'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PAT }}
          publish_dir: ./test2/website/build
          publish_branch: gh-pages
          destination_dir: pr-preview/${{ github.event.client_payload.pr_number }}
          repository: iliasmavridis/test2
          user_name: 'github-actions[test]'
          user_email: 'test@noreply.github.com'

      - name: Comment on PR in test repo
        if: steps.build-type.outputs.type == 'staging'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const pr_number = ${{ github.event.client_payload.pr_number }};
            const preview_url = `https://iliasmavridis.github.io/test2/pr-preview/${pr_number}`;
            const commentBody = "📝 This PR updates the documentation.\n\n" +
                              "👉 Preview this PR at: " + preview_url + " .";

            await github.rest.issues.createComment({
              issue_number: parseInt(pr_number),
              owner: 'iliasmavridis',
              repo: 'test',
              body: commentBody
            });